// to do:
// debug box/portal interaction
// debug wall collion
// add different kind of key that can be used by moveable boxes
// and/or let moveable boxes use regular keys
// make player fall smoothly on platforms moving down
// make diagonal ceilings not glitchy
// fix diagonal floors giving odd monentum
// let boxes interact with boost pads
// give boxes gravity/let them interact with bounce pads
// make it so moving platforms can go different speeds
// one way platforms
// UPDATE LOG:
// (no logs for before 0.1.0)
// 0.1.0  added portals
// 0.1.1  added framework for moving platforms
// 0.1.2  removed framework for moving platforms
// 0.2.0  added moving platforms and reset
// 0.3.0  added lives
// 0.3.1  changed level 1 text to reflect changes in 0.3.0
// 0.3.2  made moving reset also remove life
// 0.3.3  added ability to press "0" to fully reset
// 0.3.4  changed text on last level to reflect changes in 0.3.3
// 0.4.0  moveable box physiics are fixed thanks to a comment from Varrience Varrience on youtube
// 0.4.1  changed level 3 text to reflect changes in 0.4.0 
// 0.5.0  added box and portal interactions, added level 10
// 0.5.1  made it so players cannot enter portal after box has
// 0.5.2  changed level 10 so players cannot get stuck in portal
// 0.5.3  move moveable box changes, code by Varrience Varrience on youtube (again)
// 0.5.4  background music.
// 0.6.0  added crouching, still very glitchy
// 0.6.1  added level 11 to reflect changes in 0.6.0
// 0.6.2  debugged cruching
// 0.6.3  added text to level 11, refined code for invalid levels
// 0.6.4  added a 'next' to level 11 so players can continue to the end level
// 0.6.5  more crouch debugging
// 0.6.6  changed debug menu
// 0.6.7  made you move slower when crouching
// 0.6.8  changed slow down speed
// 0.6.9  removed ability to jump while crouching
// 0.6.10 made full reset add to the reset counter
// 0.6.11 improves wall collision slightly
// 0.6.12 added 'frames since last reset' to debug menu
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// this is a set of test levels to demonstrate the engine's strengths
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// the music was created by me (thestarchypotat) please give credit if you use it
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// press 1, m, or z for the debug screen
// press o and p to quickly switch levels
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// operating instructions:
// anything marked with a * can be removed
// to add more levels, go to the reset section in the
// physics engine and follow the directions
// remember to give credit to me (thestarchypotat)
// this engine is still being developed, and there are bugs
// check the thestarchypotat youtube channel or the
// origonal project page for any updates
// https://www.youtube.com/channel/UCaCvojF9wTJknLmN-J7NUqw
// https://studio.code.org/projects/gamelab/59euJLwAANk66a99-w2VHZSBeuo7pBSDe66HkWVM68o/edit
// (the origonal may appear to have been published after the 
// remixes, but that is because it is unpublished and 
// republished occasionally)
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// also check out the version by varrience varrience, it is more stable:
// https://studio.code.org/projects/gamelab/2wJb8AXRUxFNX6N2HE3Odby0T0N0HeLVd8aHCnSLX3s/view
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// set this to the number of levels there are -- IMPORTANT --
  var maxlevel = 12 ;
// set this to the number of lives you want -- IMPORTANT --
  var lnum = 50 ;
// set spawn position for player (you can change this)
  var spawnx = 200 ;
  var spawny = 200 ;
// create variable i (for boxes)
  var i = 0 ;
// create variables for debug
  var rTime = 0 ;
  var tSLR = 0 ;
// create variable pU (for portals)
  var pU = 0 ;
// create player
  var player = createSprite(spawnx,spawny,50,50);
// create level counter
  var level = 1 ;
// create reset counter
  var resets = 0 ;
// create lives
  var lives = lnum ;
// create portal variables
  var p2x = 200 ;
  var p2y = 200 ;
  var p = 0 ;
// create groups
  var move = createGroup();
  var ground = createGroup();
  var reset = createGroup();
  var next = createGroup();
  var keys = createGroup();
  var bounce = createGroup();
  var fake = createGroup();
  var boostL = createGroup();
  var boostR = createGroup();
  var p1 = createGroup();
// create edges
  createEdgeSprites();
// create moving platform
  var pYmax = 0 ;
  var pYmin = 0 ;
  var pMovY = 0 ;
  var pXmax = 0 ;
  var pXmin = 0 ;
  var pMovX = 0 ;
  var moveP = createSprite(-1000,0,50,50);
  moveP.tint = "black" ;
// create moving reset
  var rYmax = 0 ;
  var rYmin = 0 ;
  var rMovY = 0 ;
  var rXmax = 0 ;
  var rXmin = 0 ;
  var rMovX = 0 ;
  var moveR = createSprite(-1000,0,50,50);
  moveR.tint = "red" ;
// draw level 1 (MAKE SURE TO CHANGE THIS IF YOU CHANGE LEVEL 1)
  ground.add(createSprite(47,110,150,50));
  ground.setRotationEach(30);
  ground.add(createSprite(200,350,300,200));
  ground.add(createSprite(100,150,150,50));
  ground.add(createSprite(400,250,100,300));
  reset.add(createSprite(25,200,50,400));
  next.add(createSprite(400,80,100,50));
// creat crouching variable
 var c = 0 ;
// create speed variable
 var mS = 8 ;
// play music*
 playSound("gamemusic-2-extended-mp3.mp3", true);
// the physics engine
function draw() {
// do boost
  if (player.isTouching(boostL)) {
  if (player.velocityX > -10){
  player.velocityX = player.velocityX - 10 ;
  }
  }
  if (player.isTouching(boostR)) {
  if (player.velocityX < 10){
  player.velocityX = player.velocityX + 10 ;
  }
  }
// moving left
  if (keyDown("left") || keyDown("a")) {
  if (player.velocityX > -mS){
  player.velocityX = player.velocityX - mS ;
  }
  }
// moving right
  if (keyDown("right") || keyDown("d")) {
  if (player.velocityX < mS){
  player.velocityX = player.velocityX + mS ;
  }
  }
// wall collision
  player.collide(ground);
// portal collision
  if(pU === 1) {
  player.collide(p1);
  }
// edge collision
  player.collide(leftEdge);
  player.collide(rightEdge);
  player.collide(moveP);
// moveables collision (code by Varrience Varrience on youtube)
  if (pU === 0) {
  for (i=0; i<move.length; i++){
  if (player.y < move[i].y-move[i].height/2-player.height/2 && player.velocityY > 0 
  && (player.x > move[i].x-move[i].width/2 || player.x < move[i].x+move[i].width/2)){if(move[i].displace(player)){player.velocityY=0}}
  else {player.displace(move[i]);}
  if ((ground.displace(move) || edges.displace(move)) || (move[i].displace(move) && (edges.displace(move) || ground.displace(move)))) {
  move[i].collide(move); 
  move[i].displace(move);
  player.collide(move);
  }
  }
  } else {
  player.collide(move);
  }
// moveables portal interaction
  if (move.isTouching(p1)) {
  move.destroyEach();
  move.add(createSprite(p2x,p2y,50,50));
  pU = 1 ;
  }
// boost colisions
  player.collide(boostL);
  player.collide(boostR);
// prevents you from going to fast left and right
  if (player.velocityX > mS) {
  player.velocityX = mS ;
  }
  if (player.velocityX < -mS) {
  player.velocityX = -mS ; 
  }
// slowing down
  if (player.velocityX > 0) {
  player.velocityX = player.velocityX - 0.5 ;
  }
  if (player.velocityX < -0.1) {
  player.velocityX = player.velocityX + 0.5 ; 
  }
// jumping
  if (c === 0) {
  if (keyDown("up") || keyDown("space") || keyDown("w")){
  player.y = player.y + 3 ;
  if (player.isTouching(ground) || player.isTouching(move)||player.isTouching(moveP))   {
  player.y = player.y - 10;
  player.velocityY = -20 ;
  } else {
  player.y = player.y - 3 ;
  }
  }
  }
// bounce pads
if (player.isTouching(bounce)) {
  player.velocityY = -25 ;
}
// ground collision
  if (player.isTouching(ground) || player.isTouching(move)||player.isTouching(moveP)) {
  while (player.isTouching(ground)||player.isTouching(moveP)) {
  player.velocityY = 0 ;
  player.y = player. y - 0.1 ;
  }} else {
// gravity
  player.velocityY = player.velocityY + 1.5;
  }
// portals
  if (player.isTouching(p1) && pU === 0) {
  player.x = p2x ;
  player.y = p2y ;
  }
// move platform          THIS TOOK FOREVER IT BROKE SO MUCH
  if (pMovY === 1) {
  moveP.y-- ;
  }
  if (pMovY === 2) {
  moveP.y++ ;
  }
  if (moveP.y === pYmax) {
  pMovY = 1 ;
  }
  if (moveP.y === pYmin) {
  pMovY = 2 ;
  }
  if (pMovX === 1) {
  moveP.X++ ;
  }
  if (pMovX === 2) {
  moveP.y-- ;
  }
  if (moveP.x === pXmax) {
  pMovY = 1 ;
  }
  if (moveP.x === pXmin) {
  pMovY = 2 ;
  }
// move reset
  if (rMovY === 1) {
  moveR.y-- ;
  }
  if (rMovY === 2) {
  moveR.y++ ;
  }
  if (moveR.y === rYmax) {
  rMovY = 1 ;
  }
  if (moveR.y === rYmin) {
  rMovY = 2 ;
  }
  if (rMovX === 1) {
  moveR.X++ ;
  }
  if (rMovX === 2) {
  moveR.y-- ;
  }
  if (moveR.x === rXmax) {
  rMovY = 1 ;
  }
  if (moveR.x === rXmin) {
  rMovY = 2 ;
  }
// crouching
  if (keyDown("down")||keyDown("s")) {
  if (c === 0){
  player.y = player.y + 12.5 ;
  }
  c = 1 ;
  player.height = 25 ;
  } else {
  player.height = 50 ;
  if (c === 1) {
  player.y = player.y - 12.5 ;
  if (player.isTouching(ground)) {
  c = 1 ;
  player.height = 25 ;
  player.y = player.y + 12.5 ;
  } else {
  c = 0 ;
  }
  }
  }
  if (c === 1) {
  player.height = 25 ;
  } else {
  player.height = 50 ;
  }
// change speed if crouching
  if (c === 0) {
  mS = 8 ;
  } else {
  mS = 4 ;
  }
// check for reset/going to next level
  if (player.isTouching(reset)||keyWentDown("r")||player.isTouching(next)||keyWentDown("o")||keyWentDown("p")||player.isTouching(moveR)||keyWentDown("0")) {
// time since last reset
  rTime = World.frameCount ;
// level advance
  if(keyWentDown("0")) {
  level = 1 ;
  lives = lnum ;
  resets++ ;
  } else {
  if(player.isTouching(next)||keyWentDown("p")) {
  level++ ;
  } else {
  if(keyWentDown("o")) {
  level-- ;
  } else {
  resets++ ;
  if (player.isTouching(reset)||player.isTouching(moveR)) {
  lives-- ;
  }
  }
  }
  }
  player.velocityX = 0 ;
  player.velocityY = 0 ;
  player.x = spawnx ;
  player.y = spawny ;
  ground.destroyEach();
  reset.destroyEach();
  next.destroyEach();
  move.destroyEach();
  keys.destroyEach();
  bounce.destroyEach();
  boostL.destroyEach();
  boostR.destroyEach();
  fake.destroyEach();
  p1.destroyEach();
  p = 0 ;
  pMovY = 0 ;
  pMovX = 0 ;
  moveP.x = -1000 ;
  rMovY = 0 ;
  rMovX = 0 ;
  moveR.x = -1000 ;
  pU = 0 ;
// reset if you run out of lives
  if (lives === 0) {
  level = 1 ;
  lives = lnum ;
  }
// ground for invalid levels*
  if (level < 1||level > maxlevel) {
  ground.add(createSprite(200,350,400,200));
  }
// levels (you can edit all of these)
  if (level === 1) {
  ground.add(createSprite(47,110,150,50));
  ground.setRotationEach(30);
  ground.add(createSprite(200,350,300,200));
  ground.add(createSprite(100,150,150,50));
  ground.add(createSprite(400,250,100,300));
  reset.add(createSprite(25,200,50,400));
  next.add(createSprite(400,80,100,50));
  }
  if (level === 2) {
  ground.add(createSprite(200,350,400,200));
  ground.add(createSprite(100,150,200,50));
  reset.add(createSprite(25,200,50,400));
  reset.add(createSprite(200,150,20,50));
  next.add(createSprite(75,25,50,50));
  }
  if (level === 3) {
  ground.add(createSprite(200,350,400,200));
  ground.add(createSprite(25,200,50,200));
  ground.add(createSprite(300,75,200,50));
  move.add(createSprite(300,225,50,50));
  next.add(createSprite(375,25,50,50));
  }
  if (level === 4) {
  ground.add(createSprite(47,110,150,50));
  ground.setRotationEach(30);
  ground.add(createSprite(200,350,300,200));
  ground.add(createSprite(100,150,150,50));
  ground.add(createSprite(400,250,100,300));
  reset.add(createSprite(25,200,50,400));
  reset.add(createSprite(400,80,100,50));
  keys.add(createSprite(75,225,50,50));
  }
  if (level === 5) {
  ground.add(createSprite(200,350,400,200));
  bounce.add(createSprite(200,245,60,10));
  ground.add(createSprite(350,100,100,50));
  ground.add(createSprite(50,100,100,50));
  next.add(createSprite(25,50,50,50));
  reset.add(createSprite(375,50,50,50));
  }
  if (level === 6) {
  ground.add(createSprite(150,350,400,200));
  next.add(createSprite(375,375,50,50));
  fake.add(createSprite(375,350,50,200));
  }
  if (level === 7) {
  ground.add(createSprite(200,350,400,200));
  boostR.add(createSprite(300,255,100,10));
  boostL.add(createSprite(100,255,100,10));
  reset.add(createSprite(25,225,50,50));
  next.add(createSprite(375,225,50,50));
  }
  if (level === 8) {
  ground.add(createSprite(200,350,400,200));
  ground.add(createSprite(200,75,400,50));
  next.add(createSprite(375,25,50,50));
  p2x = 25 ;
  p2y = 25 ;
  p = 1 ;
  p1.add(createSprite(375,225,50,50));
  }
  if (level === 9) {
  ground.add(createSprite(200,350,400,200));
  ground.add(createSprite(100,75,200,50));
  next.add(createSprite(25,25,50,50));
  moveP.x = 375 ;
  moveP.y = 300 ;
  moveP.height = 200 ;
  pYmax = 300 ;
  pYmin = 200 ;
  moveR.x = 75 ;
  moveR.y = 25 ;
  rYmax = 25 ;
  rYmin = -75 ;
  }
  if (level === 10) {
  ground.add(createSprite(200,350,400,200));
  ground.add(createSprite(25,150,50,200));
  ground.add(createSprite(300,75,200,50));
  ground.add(createSprite(75,225,50,50));
  ground.add(createSprite(375,150,50,100));
  move.add(createSprite(300,225,50,50));
  next.add(createSprite(375,25,50,50));
  p1.add(createSprite(375,225,50,50));
  p2x = 75 ;
  p2y = 175 ;
  p = 1 ;
  }
  if (level === 11) {
  ground.add(createSprite(200,350,400,200));
  ground.add(createSprite(325,200,150,50));
  ground.add(createSprite(325,100,150,200));
  next.add(createSprite(375,237.5,50,25));
  }
// to add another level, between this and the note that says
// "end of levels", then add the code shown below
// if (level === the level number) {design of the level}
// use the "ground" group to add ground for the player
// use the "reset" group to make areas that reset the player
// use the "next" group to make an area that advances the player
// to the next level make sure that the previous levels
// have a sprite from the "next" group.
// DO NOT MAKE DIAGONAL CELINGS, IT BREAKS THE ENGINE
// make sure you have your key actions programed in the
// section for key actions (right below end of leves)
// BOXES DO NOT HAVE GRAVITY, DESIGN LEVELS TO ACCOUNT FOR THAT
  
// end of levels
// "the end" level
  if (level === maxlevel) {
  ground.add(createSprite(200,350,400,200));
  }
  }
// check for touching key
  if (player.isTouching(keys)) {
  keys.destroyEach();
// key actions
  if (level === 4) {
  reset.destroyEach();
  reset.add(createSprite(25,200,50,400));
  next.add(createSprite(400,80,100,50));
  }
// add your actions for keys between here
// and the "END OF ACTIONS" text
  
// END OF ACTIONS
  }
// color level sprites*
  reset.setTintEach("red");
  ground.setTintEach("black");
  next.setTintEach("green");
  move.setTintEach("blue");
  keys.setTintEach("orange");
  bounce.setTintEach("purple");
  boostL.setTintEach(rgb(70, 250, 260));
  boostR.setTintEach(rgb(50, 230, 240));
  p1.setTintEach(rgb(250,50,200));
// colors fake ground yellow if debug*
  if (keyDown("1")||keyDown("m")||keyDown("z")) {
  fake.setTintEach("yellow");
  } else {
  fake.setTintEach("black");
  }
// background (you can change the color)
  background("white");
// draw portal 2
  if (p === 1) {
  noStroke();
  fill(250,50,200);
  rect(p2x-25,p2y-25,50,50);
  }
// instructional text*
  textSize(30);
  fill("black");

  if (level === 1) {
  text("Use arrow keys to move",55,48);
  text("press r to reset", 100,90);
  text("(dosen't use",175,125);
  text("a life)",175,150);
  }
  if (level === 2) {
  text("you can change direction midair", 150,50,300);
  }
  if (level === 3) {
  text("boxes",160,180);
  }
  if (level === 4) {
  text("keys",180,80);
  }
  if (level === 5) {
  text("bouncy",150,200);
  }
  if (level === 6) {
  text("fake ground",125,100);
  text("↓",370,200);
  }
  if (level === 7) {
  text("boost",165,100);
  }
  if (level === 8) {
  text("portal",165,150);
  }
  if (level === 9) {
  text("move",165,150);
  }
  if (level === 10) {
  text("box and portal interaction",5,30);
  }
  if (level === 11) {
  text("press down or s",5,30);
  text("to crouch",5,60);
  }
// "the end" level text
  if (level === maxlevel) {
  text("the end",150,100);
  text("0 to go to beginning",70,130);
  }
// text for invalid levels*
  if (level < 1||level > maxlevel) {
  text("not a valid level: "+level,5,30);
  }
// draw sprites
  drawSprites();
// update time since last reset
  tSLR = World.frameCount - rTime ;
// debug*
  if(keyDown("1")||keyDown("m")||keyDown("z")){
  textSize(18);
  fill("white");
  text("framerate :" + World.frameRate,0,380);
  text("frames: " + World.frameCount,0,365);
  text("player y: " + player.y,0,350);
  text("player x: " + player.x,0,335);
  text("resets: " + resets,0,320);
  text("level: " + level,0,305);
  text("crouching: " + c,0,290);
  text("frames since last reset: " + tSLR,0,275);
  }
// show lives
  textSize(20);
  fill("white");
  text("lives: "+lives,0,400);
}
